Here's a more natural, less AI-generated style version of your README content:

---

# Frame Interpolation for Satellite Imagery

This project improves satellite image sequences by generating smooth intermediate frames using AI. It uses the FILM model (Frame Interpolation for Large Motion) to fill in gaps between images from the MOSDAC satellite data accessed via WMS. The results are shown on an interactive web map built with OpenLayers.

## Key Features

* Access satellite images via WMS from MOSDAC
* Use FILM model for AI-powered frame interpolation
* Achieved 88% accuracy in interpolation quality
* Interactive visualization with OpenLayers maps
* Web-based interface for easy exploration

---

## Technologies Used

| Part          | Tools & Libraries               |
| ------------- | ------------------------------- |
| Frontend      | HTML, JavaScript, OpenLayers    |
| Backend/Model | Python, TensorFlow (FILM model) |
| Data Source   | MOSDAC satellite data via WMS   |

---

## What is Frame Interpolation?

Frame interpolation creates new frames between two existing images to make transitions smoother. This helps:

* Create smoother time-lapse videos
* Better visualize changes over time in satellite data
* Analyze movement patterns like clouds or rainfall

---

## About the FILM Model

FILM is a deep learning model designed to handle large movements between frames for smooth interpolation. It features:

* U-Net style encoder-decoder
* Bidirectional optical flow estimation
* Feature warping and fusion

This lets it create high-quality interpolated frames without needing extra tuning.

Resources:

* [Research paper](https://arxiv.org/abs/2202.04901)
* [TensorFlow code](https://github.com/google-research/frame-interpolation)

---

## Visualization with OpenLayers

OpenLayers is a JavaScript library to display maps in the browser. Here, it:

* Displays satellite base maps with overlaid interpolated frames
* Supports zoom, pan, and time-based navigation
* Allows switching layers and comparing original vs interpolated images

---

How It Works

1. Fetch satellite images from MOSDAC using WMS
2. Prepare images for input (resize, align)
3. Run FILM model to generate intermediate frames
4. Load results into OpenLayers for interactive viewing
5. Deploy as a web app (static or with Flask backend)

---

Results

* Achieved 88% accuracy on interpolation quality metrics
* Runs at \~30 FPS on GPU for near real-time use
* Useful for enhancing rainfall and cloud movement visualizations


